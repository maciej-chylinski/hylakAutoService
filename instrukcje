[0]
utworzenie środowiska wirtualnego: python -m venv hylakenv
aktywacja: hylakenv\Scripts\activate
tworzenie projektu: django-admin startproject hylakAutoSerwis .
ustaw source-root katalog z virtual envem (twoje wirtualne środowisko virtualenv - tutaj hylakenv)

[1]
tworzenie aplikacji 'blog':
python manage.py startapp blog

Po stworzeniu aplikacji musimy dać znać Django, że powinien jej używać. Posługujemy się w tym celu plikiem mysite/settings.py. Musimy odnaleźć nagłówek INSTALLED_APPS i dodać wiersz o treści 'blog', tuż przed nawiasem zamykającym ). Czyli efekt końcowy powinien wyglądać tak:
INSTALLED_APPS = (
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'blog',
)

Potem tworzenie modelu w pliku blog/models.py
Potem migracje: python manage.py makemigrations blog /albo python manage.py makemigrations + python manage.py showmigrations - pokaże migracje

python manage.py makemigrations blog
python manage.py migrate blog

[2] tworzymy konto admin
blog/admin.py:
from django.contrib import admin
from .models import Post
admin.site.register(Post)

python manage.py runserver
http://127.0.0.1:8000/admin/

oraz w konsoli superuser: python manage.py createsuperuser

panel admina django: https://docs.djangoproject.com/en/1.8/ref/contrib/admin/

[3]
<<<<<<< HEAD
publikowanie
=======
publikowanie: https://tutorial.djangogirls.org/pl/deploy/
>>>>>>> views_customization

git init -> w katalogu głównym prjektu:  C:\Users\mchylinx\PycharmProjects\hylak_serwis>

stwórz plik: touch .gitignore
treść:
*.pyc
__pycache__
myvenv
db.sqlite3
.DS_Store
<<<<<<< HEAD
=======

git add --all

creating a repo on github:
create a repo on github
git remote add origin https://github.com/maciej-chylinski/hylakAutoService.git





O selektorach CSS możesz przeczytać więcej tutaj: CSS Selectors in w3schools.

pythona-anywhere.com
machylinx
hylak**
maciej.chyloinski@gmail.com
path = '/home/<your-username>/my-first-blog'
/home/mchylinx/hylakAutoService




// Tworzenie obiektu
W taki sposób tworzymy nowy obiekt Post w bazie danych:
>>> Post.objects.create(author=me, title='Przykładowy tytuł', text='Test')

Ale brakuje nam jednego składnika: me. Musimy przekazać instancję modelu User jako autora.
Najpierw zaimportujmy model User:
>>> from django.contrib.auth.models import User
Jakich użytkowników mamy w bazie danych?:
>>> User.objects.all()
<QuerySet [<User: mchylinx>]>
To konto administratora, które stworzyłyśmy wcześniej! Teraz uzyskajmy dostęp do naszej instancji użytkownika:
me = User.objects.get(username='ola')

Jak widzisz, za pomocą polecenia get pobrałyśmy z bazy obiekt użytkownika (User) z właściwością username o wartości 'mchylinx'.
Teraz możemy wreszcie stworzyć post:
>>> Post.objects.create(author=me, title='Przykładowy tytuł', text='Test')
>>> Post.objects.all()
<QuerySet [<Post: Mój pierwszy wpis>, <Post: Kolejny tytuł wpisu>, <Post: Przykładowy tytuł>]>

Filtrowanie:
Post.objects.filter(author=me)
Post.objects.filter(title__contains = 'jakiś_fragment_tytułu')

from django.utils import timezone
>>> Post.objects.filter(published_date__lte=timezone.now())

QuerySetów w Django: https://docs.djangoproject.com/en/1.8/ref/models/querysets/


Dobrze byłoby sprawdzić, czy Twoja strona dalej działa w Internecie, prawda? Ponownie wyślijmy kod na PythonAnywhere. Oto małe przypomnienie jak to zrobić...

Najpierw zapisz swój kod na Githubie
$ git status
[...]
$ git add --all .
$ git status
[...]
$ git commit -m "Modyfikacja szablonu, by pokazywal posty z bazy danych"
[...]
$ git push
Teraz zaloguj się ponownie na PythonAnywhere i przejdź do konsoli Bash (albo uruchom nową) i wpisz:
$ cd my-first-blog
$ git pull
source myvenv/bin/activate
Na koniec przejdź do podstrony Web tab i naciśnij Reload. Twoja aktualizacja powinna być widoczna!



codalej: https://tutorial-extensions.djangogirls.org/en/


.page-header {
    /*background-color: #ff9400;*/
    background-color: #000000;
    margin-top: 0;
    padding: 20px 20px 50px 50px;
}

.page-header h1, .page-header h1 a, .page-header h1 a:visited, .page-header h1 a:active {
    color: #ffffff;
    font-size: 36pt;
    text-decoration: none;
}

.sub-menu {
    font-family: 'Marcellus', sans-serif;
    float: right;
}

.sub-menu-item, .sub-menu-item:hover, .sub-menu-item:visited {
    color: #ffffff;
    font-size: 16pt;
    margin-right: 40px;
}

.sub-menu-item:hover {
    text-decoration: none;
    color: orange;
}

.content {
    margin-left: default;
    margin-right: default;
}

h1, h2, h3, h4 {
    /*font-family: 'Lobster', cursive;*/
    font-family: 'Marcellus', sans-serif;
}

.date {
    float: right;
    color: #828282;
}

.save {
    float: right;
}

.post-form textarea, .post-form input {
    width: 100%;
}

.top-menu, .top-menu:hover, .top-menu:visited {
    color: #ffffff;
    float: right;
    font-size: 26pt;
    margin-right: 20px;
}

.post {
    margin-bottom: 70px;
}

.post h1 a, .post h1 a:visited {
    color: #000000;
}

.offer {
    margin-bottom: 70px;
}


body {
	font-family: 'Open Sans', sans-serif;
	margin: 0px;
	padding: 0px;
	font-color: #fff;
}
